name: iOS CI — App & SPM (iOS 15+)

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IOS_DEST: platform=iOS Simulator,OS=latest
  DERIVED_DATA: ${{ runner.temp }}/DerivedData
  RESULT_BUNDLE: ${{ runner.temp }}/TestResults.xcresult
  IOS_APP_SCHEME: MeddSup          # <-- Cambia si tu scheme es otro
  LOGINMODULE_PATH: LoginModule    # <-- Carpeta donde está el Package.swift del módulo

jobs:
  loginmodule-tests:
    name: LoginModule • Tests (iOS Simulator)
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode (latest-stable)
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install xcpretty
        run: sudo gem install xcpretty --no-document

      - name: Cache SPM (package)
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ${{ env.LOGINMODULE_PATH }}/.build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: List SPM Schemes
        run: |
          xcodebuild -list -json -package-path "${LOGINMODULE_PATH}" > schemes.json
          python3 - <<'PY'
import json
d=json.load(open('schemes.json'))
schemes=d.get('workspace',{}).get('schemes',[])
print("Schemes:", schemes)
if not schemes:
    raise SystemExit(1)
PY

      - name: xcodebuild test (SPM package on iOS)
        run: |
          set -euo pipefail
          SCHEMES=$(python3 - <<'PY'
import json
d=json.load(open('schemes.json'))
for s in d.get('workspace',{}).get('schemes',[]):
    print(s)
PY
)
          EXITCODE=0
          while IFS= read -r S; do
            [ -z "$S" ] && continue
            echo "→ Testing SPM scheme: $S"
            set -o pipefail
            xcodebuild -scheme "$S" \
              -package-path "${LOGINMODULE_PATH}" \
              -destination "${IOS_DEST}" \
              -configuration Debug \
              -derivedDataPath "${DERIVED_DATA}" \
              -resultBundlePath "${RESULT_BUNDLE}" \
              -enableCodeCoverage YES \
              CODE_SIGNING_ALLOWED=NO test | xcpretty || EXITCODE=$?
          done <<< "$SCHEMES"
          exit $EXITCODE

      - name: Upload artifacts (SPM)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: SPM-TestArtifacts
          path: |
            ${{ env.RESULT_BUNDLE }}
            ${{ env.DERIVED_DATA }}/Logs/Build
          if-no-files-found: ignore
          retention-days: 7

  app-tests:
    name: App iOS • Tests (Simulator)
    runs-on: macos-latest
    needs: loginmodule-tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode (latest-stable)
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install xcpretty
        run: sudo gem install xcpretty --no-document

      - name: Cache SPM (app)
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-xcode-spm-

      - name: Detect .xcworkspace / .xcodeproj
        id: locate
        run: |
          set -e
          WORKSPACE=$(ls -1 *.xcworkspace 2>/dev/null | head -n1 || true)
          PROJECT=$(ls -1 *.xcodeproj 2>/dev/null | head -n1 || true)
          if [ -n "$WORKSPACE" ]; then
            echo "workspace=$WORKSPACE" >> "$GITHUB_OUTPUT"
          elif [ -n "$PROJECT" ]; then
            echo "project=$PROJECT" >> "$GITHUB_OUTPUT"
          else
            echo "No .xcworkspace or .xcodeproj found at repo root"
            exit 1
          fi

      - name: xcodebuild test (App via workspace)
        if: ${{ steps.locate.outputs.workspace != '' }}
        run: |
          set -euo pipefail
          xcodebuild -workspace "${{ steps.locate.outputs.workspace }}" \
            -scheme "${IOS_APP_SCHEME}" \
            -destination "${IOS_DEST}" \
            -configuration Debug \
            -derivedDataPath "${DERIVED_DATA}" \
            -resultBundlePath "${RESULT_BUNDLE}" \
            -enableCodeCoverage YES \
            CODE_SIGNING_ALLOWED=NO test | xcpretty

      - name: xcodebuild test (App via project)
        if: ${{ steps.locate.outputs.workspace == '' && steps.locate.outputs.project != '' }}
        run: |
          set -euo pipefail
          xcodebuild -project "${{ steps.locate.outputs.project }}" \
            -scheme "${IOS_APP_SCHEME}" \
            -destination "${IOS_DEST}" \
            -configuration Debug \
            -derivedDataPath "${DERIVED_DATA}" \
            -resultBundlePath "${RESULT_BUNDLE}" \
            -enableCodeCoverage YES \
            CODE_SIGNING_ALLOWED=NO test | xcpretty

      - name: Upload artifacts (App)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: App-TestArtifacts
          path: |
            ${{ env.RESULT_BUNDLE }}
            ${{ env.DERIVED_DATA }}/Logs/Build
          if-no-files-found: ignore
          retention-days: 7

  build-app:
    name: App iOS • Build (Debug)
    runs-on: macos-latest
    needs: app-tests

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode (latest-stable)
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install xcpretty
        run: sudo gem install xcpretty --no-document

      - name: Cache SPM (build)
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-xcode-spm-

      - name: Detect .xcworkspace / .xcodeproj
        id: locate
        run: |
          set -e
          WORKSPACE=$(ls -1 *.xcworkspace 2>/dev/null | head -n1 || true)
          PROJECT=$(ls -1 *.xcodeproj 2>/dev/null | head -n1 || true)
          if [ -n "$WORKSPACE" ]; then
            echo "workspace=$WORKSPACE" >> "$GITHUB_OUTPUT"
          elif [ -n "$PROJECT" ]; then
            echo "project=$PROJECT" >> "$GITHUB_OUTPUT"
          else
            echo "No .xcworkspace or .xcodeproj found at repo root"
            exit 1
          fi

      - name: xcodebuild build (App via workspace)
        if: ${{ steps.locate.outputs.workspace != '' }}
        run: |
          set -euo pipefail
          xcodebuild -workspace "${{ steps.locate.outputs.workspace }}" \
            -scheme "${IOS_APP_SCHEME}" \
            -destination "${IOS_DEST}" \
            -configuration Debug \
            -derivedDataPath "${DERIVED_DATA}" \
            CODE_SIGNING_ALLOWED=NO build | xcpretty

      - name: xcodebuild build (App via project)
        if: ${{ steps.locate.outputs.workspace == '' && steps.locate.outputs.project != '' }}
        run: |
          set -euo pipefail
          xcodebuild -project "${{ steps.locate.outputs.project }}" \
            -scheme "${IOS_APP_SCHEME}" \
            -destination "${IOS_DEST}" \
            -configuration Debug \
            -derivedDataPath "${DERIVED_DATA}" \
            CODE_SIGNING_ALLOWED=NO build | xcpretty
